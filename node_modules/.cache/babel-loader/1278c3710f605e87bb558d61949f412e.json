{"ast":null,"code":"var _jsxFileName = \"/Users/chloebalcer/bikeStation/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { query } from \"stardog\";\nimport { TableDataAvailabilityStatus, columnData, columnSelectors } from \"./helpers/constants\"; // Let's not take _quite_ the entire browser screen.\n\nconst styles = {\n  appInnerContainer: {\n    width: \"90%\",\n    margin: \"20px auto 0\"\n  },\n  paper: {\n    overflowX: \"auto\"\n  },\n  spinner: {\n    margin: \"20px auto\",\n    display: \"block\"\n  }\n};\nconst columnHeaders = columnData.map(({\n  label\n}) => /*#__PURE__*/React.createElement(TableCell, {\n  key: label,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 53\n  }\n}, label));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: []\n    };\n  }\n\n  getBindingValueForSelector(selector, binding) {\n    const bindingValue = binding[selector === \"movie\" ? \"movies\" : selector]; // NOTE: In a production app, we would probably want to do this formatting elsewhere.\n\n    return Array.isArray(bindingValue) ? bindingValue.join(\", \") : bindingValue;\n  }\n\n  renderRowForBinding(binding, index) {\n    return (\n      /*#__PURE__*/\n      // Use every \"selector\" to extract table cell data from each binding.\n      React.createElement(TableRow, {\n        key: binding.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }, columnSelectors.map(selector => /*#__PURE__*/React.createElement(TableCell, {\n        key: selector,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, this.getBindingValueForSelector(selector, binding))))\n    );\n  }\n\n  render() {\n    const {\n      dataState,\n      data\n    } = this.state;\n    const isLoading = dataState === TableDataAvailabilityStatus.LOADING;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: styles.appInnerContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      style: styles.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, \"Star Wars\"), \" with Stardog\")), isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n      style: styles.spinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 24\n      }\n    }) : /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, columnHeaders)), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, data.map((binding, index) => this.renderRowForBinding(binding, index))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chloebalcer/bikeStation/frontend/src/App.js"],"names":["React","Component","CssBaseline","Paper","Table","TableBody","TableCell","TableHead","TableRow","Toolbar","Typography","CircularProgress","query","TableDataAvailabilityStatus","columnData","columnSelectors","styles","appInnerContainer","width","margin","paper","overflowX","spinner","display","columnHeaders","map","label","App","constructor","props","state","dataState","NOT_REQUESTED","data","getBindingValueForSelector","selector","binding","bindingValue","Array","isArray","join","renderRowForBinding","index","id","render","isLoading","LOADING"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { query } from \"stardog\";\nimport {\n  TableDataAvailabilityStatus,\n  columnData,\n  columnSelectors,\n} from \"./helpers/constants\";\n\n// Let's not take _quite_ the entire browser screen.\nconst styles = {\n  appInnerContainer: {\n    width: \"90%\",\n    margin: \"20px auto 0\"\n  },\n  paper: {\n    overflowX: \"auto\"\n  },\n  spinner: {\n    margin: \"20px auto\",\n    display: \"block\"\n  }\n};\n\nconst columnHeaders = columnData.map(({ label }) => <TableCell key={label}>{label}</TableCell>);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: []\n    };\n  }\n\n  getBindingValueForSelector(selector, binding) {\n    const bindingValue = binding[selector === \"movie\" ? \"movies\" : selector];\n    // NOTE: In a production app, we would probably want to do this formatting elsewhere.\n    return Array.isArray(bindingValue) ? bindingValue.join(\", \") : bindingValue;\n  }\n\n  renderRowForBinding(binding, index) {\n    return (\n      // Use every \"selector\" to extract table cell data from each binding.\n      <TableRow key={binding.id}>\n        {columnSelectors.map(selector => (\n          <TableCell key={selector}>\n            {this.getBindingValueForSelector(selector, binding)}\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n\n  render() {\n    const { dataState, data } = this.state;\n    const isLoading = dataState === TableDataAvailabilityStatus.LOADING;\n\n    return (\n      <div className=\"App\" style={styles.appInnerContainer}>\n        <CssBaseline />\n        <Paper style={styles.paper}>\n          <Toolbar>\n            <Typography variant=\"title\">\n              <i>Star Wars</i> with Stardog\n            </Typography>\n          </Toolbar>\n          {isLoading ? <CircularProgress style={styles.spinner} /> : (\n            <Table>\n              <TableHead>\n                <TableRow>\n                  {columnHeaders}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((binding, index) => this.renderRowForBinding(binding, index))}\n              </TableBody>\n            </Table>\n          )}\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}