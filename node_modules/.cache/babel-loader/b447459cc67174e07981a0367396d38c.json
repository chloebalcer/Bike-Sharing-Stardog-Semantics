{"ast":null,"code":"var _jsxFileName = \"/Users/chloebalcer/bikeStation/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TableDataAvailabilityStatus, columnData, columnSelectors, conn, dbName } from \"./helpers/constants\";\nimport { query } from \"stardog\"; // Let's not take _quite_ the entire browser screen.\n\nconst styles = {\n  appInnerContainer: {\n    width: \"90%\",\n    margin: \"20px auto 0\"\n  },\n  paper: {\n    overflowX: \"auto\"\n  },\n  spinner: {\n    margin: \"20px auto\",\n    display: \"block\"\n  }\n};\nconst columnHeaders = columnData.map(({\n  label\n}) => /*#__PURE__*/React.createElement(TableCell, {\n  key: label,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 53\n  }\n}, label));\nconst readQuery = `select  ?loc ?adresse ?commune ?nbvelos where { \n  ?n <http://www.schema.org#localisation> ?loc .\n  ?n <http://www.schema.org#adresse> ?adresse . \n  ?n <http://www.schema.org#commune> ?commune .\n  ?n <http://www.schema.org#nbvelosdispo> ?nbvelos .\n  \n}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData() {\n    this.setState({\n      dataState: TableDataAvailabilityStatus.LOADING\n    });\n    query.execute(conn, dbName, readQuery).then(res => {\n      if (!res.ok) {\n        this.setState({\n          dataState: TableDataAvailabilityStatus.FAILED\n        });\n        return;\n      }\n\n      const {\n        bindings\n      } = res.body.results;\n      const bindingsForTable = this.getBindingsFormattedForTable(bindings);\n      this.setState({\n        dataState: TableDataAvailabilityStatus.LOADED,\n        data: bindingsForTable\n      });\n    });\n  } // Our SPARQL query returns a new \"row\" (i.e., variable binding) for each\n  // character for each movie in which the character appears. We don't want to\n  // _display_ multiple rows for the same character, though. Instead, we want\n  // to show _one_ row for each character, and, if the character was in several\n  // movies, we want to show them as a group within that character's single row. This\n  // method goes through the bindings, groups them under each individual\n  // character's id, then merges them together, aggregating the movies as an\n  // array of strings. It also cleans up some of the data so that it's more\n  // readable in the UI.\n\n\n  getBindingsFormattedForTable(bindings) {\n    // Group the bindings by each character id, in case multiple rows were\n    // returned for a single character.\n    const bindingsById = bindings.reduce((groupedBindings, binding) => {\n      const {\n        value: recordid\n      } = binding.recordid;\n      groupedBindings[recordid] = groupedBindings[recordid] ? groupedBindings[recordid].concat(binding) : [binding];\n      return groupedBindings;\n    }, {}); // Sort the bindings by id (ascending), then, if there are multiple\n    // bindings for a single id, merge them together, aggregating movies as an\n    // array.\n\n    return Object.keys(bindingsById).map(recordid => parseInt(recordid, 10)) // convert ids from strings to numbers for sorting\n    .sort() // we do this sorting client-side because `Object.keys` ordering is not guaranteed\n    .map(recordid => {\n      // For each `id`, merge the bindings together as described above.\n      return bindingsById[recordid].reduce((bindingForTable, binding) => {\n        // Quick cleanup to remove IRI data that we don't want to display:\n        const bindingValues = Object.keys(binding).reduce((valueBinding, key) => {\n          const {\n            type,\n            value\n          } = binding[key];\n          valueBinding[key] = type !== \"uri\" ? value : value.slice(value.lastIndexOf(\"/\") + 1); // data cleanup\n\n          return valueBinding;\n        }, {}); // Aggregate movies on the `movies` property, deleting `movie`:\n\n        const movies = bindingValues.adresse ? bindingForTable.movies.concat(bindingValues.adresse) : bindingForTable.movies;\n        delete bindingValues.adresse;\n        return { ...bindingForTable,\n          ...bindingValues,\n          movies\n        };\n      }, {\n        movies: []\n      });\n    });\n  }\n\n  getBindingValueForSelector(selector, binding) {\n    const bindingValue = binding[selector === \"adresse\" ? \"movies\" : selector]; // NOTE: In a production app, we would probably want to do this formatting elsewhere.\n\n    return Array.isArray(bindingValue) ? bindingValue.join(\", \") : bindingValue;\n  }\n\n  renderRowForBinding(binding, index) {\n    return (\n      /*#__PURE__*/\n      // Use every \"selector\" to extract table cell data from each binding.\n      React.createElement(TableRow, {\n        key: binding.recordid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 7\n        }\n      }, columnSelectors.map(selector => /*#__PURE__*/React.createElement(TableCell, {\n        key: selector,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }, this.getBindingValueForSelector(selector, binding))))\n    );\n  }\n\n  render() {\n    const {\n      dataState,\n      data\n    } = this.state;\n    const isLoading = dataState === TableDataAvailabilityStatus.LOADING;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: styles.appInnerContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      style: styles.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }, \"Star Wars\"), \" with Stardog\")), isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n      style: styles.spinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 24\n      }\n    }) : /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, columnHeaders)), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, data.map((binding, index) => this.renderRowForBinding(binding, index))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chloebalcer/bikeStation/frontend/src/App.js"],"names":["React","Component","CssBaseline","Paper","Table","TableBody","TableCell","TableHead","TableRow","Toolbar","Typography","CircularProgress","TableDataAvailabilityStatus","columnData","columnSelectors","conn","dbName","query","styles","appInnerContainer","width","margin","paper","overflowX","spinner","display","columnHeaders","map","label","readQuery","App","constructor","props","state","dataState","NOT_REQUESTED","data","componentDidMount","refreshData","setState","LOADING","execute","then","res","ok","FAILED","bindings","body","results","bindingsForTable","getBindingsFormattedForTable","LOADED","bindingsById","reduce","groupedBindings","binding","value","recordid","concat","Object","keys","parseInt","sort","bindingForTable","bindingValues","valueBinding","key","type","slice","lastIndexOf","movies","adresse","getBindingValueForSelector","selector","bindingValue","Array","isArray","join","renderRowForBinding","index","render","isLoading"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TableDataAvailabilityStatus,\n  columnData,\n  columnSelectors,\n  conn,\n  dbName,\n} from \"./helpers/constants\";\n\nimport { query } from \"stardog\";\n\n\n// Let's not take _quite_ the entire browser screen.\nconst styles = {\n  appInnerContainer: {\n    width: \"90%\",\n    margin: \"20px auto 0\"\n  },\n  paper: {\n    overflowX: \"auto\"\n  },\n  spinner: {\n    margin: \"20px auto\",\n    display: \"block\"\n  }\n};\n\nconst columnHeaders = columnData.map(({ label }) => <TableCell key={label}>{label}</TableCell>);\nconst readQuery = `select  ?loc ?adresse ?commune ?nbvelos where { \n  ?n <http://www.schema.org#localisation> ?loc .\n  ?n <http://www.schema.org#adresse> ?adresse . \n  ?n <http://www.schema.org#commune> ?commune .\n  ?n <http://www.schema.org#nbvelosdispo> ?nbvelos .\n  \n}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: []\n    };\n  }\n  componentDidMount() {\n    this.refreshData();\n  }\n  \n  refreshData() {\n    this.setState({\n      dataState: TableDataAvailabilityStatus.LOADING\n    });\n    query.execute(conn, dbName, readQuery).then(res => {\n      if (!res.ok) {\n        this.setState({\n          dataState: TableDataAvailabilityStatus.FAILED\n        });\n        return;\n      }\n  \n      const { bindings } = res.body.results;\n      const bindingsForTable = this.getBindingsFormattedForTable(bindings);\n  \n      this.setState({\n        dataState: TableDataAvailabilityStatus.LOADED,\n        data: bindingsForTable\n      });\n    });\n  }\n  \n  // Our SPARQL query returns a new \"row\" (i.e., variable binding) for each\n  // character for each movie in which the character appears. We don't want to\n  // _display_ multiple rows for the same character, though. Instead, we want\n  // to show _one_ row for each character, and, if the character was in several\n  // movies, we want to show them as a group within that character's single row. This\n  // method goes through the bindings, groups them under each individual\n  // character's id, then merges them together, aggregating the movies as an\n  // array of strings. It also cleans up some of the data so that it's more\n  // readable in the UI.\n  getBindingsFormattedForTable(bindings) {\n    // Group the bindings by each character id, in case multiple rows were\n    // returned for a single character.\n    const bindingsById = bindings.reduce((groupedBindings, binding) => {\n      const { value: recordid } = binding.recordid;\n      groupedBindings[recordid] = groupedBindings[recordid] ? groupedBindings[recordid].concat(binding) : [binding];\n      return groupedBindings;\n    }, {});\n  \n    // Sort the bindings by id (ascending), then, if there are multiple\n    // bindings for a single id, merge them together, aggregating movies as an\n    // array.\n    return Object.keys(bindingsById)\n      .map(recordid => parseInt(recordid, 10)) // convert ids from strings to numbers for sorting\n      .sort() // we do this sorting client-side because `Object.keys` ordering is not guaranteed\n      .map(recordid => {\n        // For each `id`, merge the bindings together as described above.\n        return bindingsById[recordid].reduce(\n          (bindingForTable, binding) => {\n            // Quick cleanup to remove IRI data that we don't want to display:\n            const bindingValues = Object.keys(binding).reduce((valueBinding, key) => {\n              const { type, value } = binding[key];\n              valueBinding[key] = type !== \"uri\" ? value : value.slice(value.lastIndexOf(\"/\") + 1); // data cleanup\n              return valueBinding;\n            }, {});\n            // Aggregate movies on the `movies` property, deleting `movie`:\n            const movies = bindingValues.adresse\n              ? bindingForTable.movies.concat(bindingValues.adresse)\n              : bindingForTable.movies;\n            delete bindingValues.adresse;\n            return {\n              ...bindingForTable,\n              ...bindingValues,\n              movies\n            };\n          },\n          { movies: [] }\n        );\n      });\n  }\n  getBindingValueForSelector(selector, binding) {\n    const bindingValue = binding[selector === \"adresse\" ? \"movies\" : selector];\n    // NOTE: In a production app, we would probably want to do this formatting elsewhere.\n    return Array.isArray(bindingValue) ? bindingValue.join(\", \") : bindingValue;\n  }\n\n  renderRowForBinding(binding, index) {\n    return (\n      // Use every \"selector\" to extract table cell data from each binding.\n      <TableRow key={binding.recordid}>\n        {columnSelectors.map(selector => (\n          <TableCell key={selector}>\n            {this.getBindingValueForSelector(selector, binding)}\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n\n  render() {\n    const { dataState, data } = this.state;\n    const isLoading = dataState === TableDataAvailabilityStatus.LOADING;\n    return (\n      <div className=\"App\" style={styles.appInnerContainer}>\n        <CssBaseline />\n        <Paper style={styles.paper}>\n          <Toolbar>\n            <Typography variant=\"title\">\n              <i>Star Wars</i> with Stardog\n            </Typography>\n          </Toolbar>\n          {isLoading ? <CircularProgress style={styles.spinner} /> : (\n            <Table>\n              <TableHead>\n                <TableRow>\n                  {columnHeaders}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((binding, index) => this.renderRowForBinding(binding, index))}\n              </TableBody>\n            </Table>\n          )}\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}