{"ast":null,"code":"var _jsxFileName = \"/Users/chloebalcer/bikeStation/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TableDataAvailabilityStatus, columnData, columnSelectors, conn, dbName } from \"./helpers/constants\";\nimport { query } from \"stardog\"; // Let's not take _quite_ the entire browser screen.\n\nconst styles = {\n  appInnerContainer: {\n    width: \"90%\",\n    margin: \"20px auto 0\"\n  },\n  paper: {\n    overflowX: \"auto\"\n  },\n  spinner: {\n    margin: \"20px auto\",\n    display: \"block\"\n  }\n};\nconst columnHeaders = columnData.map(({\n  label\n}) => /*#__PURE__*/React.createElement(TableCell, {\n  key: label,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 53\n  }\n}, label));\nconst readQuery = `select  ?recordid ?adresse ?commune ?nbvelosdispo ?nbplacesdispo where { \n  ?k <http://www.schema.org#recordid> ?recordid .\n  ?k <http://www.schema.org#fields> ?l .\n  ?l <http://www.schema.org#adresse> ?adresse .\n  ?l <http://www.schema.org#commune> ?commune .\n  ?l <http://www.schema.org#nbvelosdispo> ?nbvelosdispo .\n  ?l <http://www.schema.org#nbplacesdispo> ?nbplacesdispo .                \n}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData() {\n    this.setState({\n      dataState: TableDataAvailabilityStatus.LOADING\n    });\n    query.execute(conn, dbName, readQuery).then(res => {\n      if (!res.ok) {\n        this.setState({\n          dataState: TableDataAvailabilityStatus.FAILED\n        });\n        return;\n      }\n\n      const {\n        bindings\n      } = res.body.results;\n    });\n  } // Our SPARQL query returns a new \"row\" (i.e., variable binding) for each\n  // character for each movie in which the character appears. We don't want to\n  // _display_ multiple rows for the same character, though. Instead, we want\n  // to show _one_ row for each character, and, if the character was in several\n  // movies, we want to show them as a group within that character's single row. This\n  // method goes through the bindings, groups them under each individual\n  // character's id, then merges them together, aggregating the movies as an\n  // array of strings. It also cleans up some of the data so that it's more\n  // readable in the UI.\n\n\n  render() {\n    const {\n      dataState,\n      data\n    } = this.state;\n    const isLoading = dataState === TableDataAvailabilityStatus.LOADING;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: styles.appInnerContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      style: styles.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, \"Bike Stations\"), \" with Stardog\")), isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n      style: styles.spinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 24\n      }\n    }) : /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, columnHeaders)), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, data))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chloebalcer/bikeStation/frontend/src/App.js"],"names":["React","Component","CssBaseline","Paper","Table","TableBody","TableCell","TableHead","TableRow","Toolbar","Typography","CircularProgress","TableDataAvailabilityStatus","columnData","columnSelectors","conn","dbName","query","styles","appInnerContainer","width","margin","paper","overflowX","spinner","display","columnHeaders","map","label","readQuery","App","constructor","props","state","dataState","NOT_REQUESTED","data","componentDidMount","refreshData","setState","LOADING","execute","then","res","ok","FAILED","bindings","body","results","render","isLoading"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TableDataAvailabilityStatus,\n  columnData,\n  columnSelectors,\n  conn,\n  dbName,\n} from \"./helpers/constants\";\n\nimport { query } from \"stardog\";\n\n\n// Let's not take _quite_ the entire browser screen.\nconst styles = {\n  appInnerContainer: {\n    width: \"90%\",\n    margin: \"20px auto 0\"\n  },\n  paper: {\n    overflowX: \"auto\"\n  },\n  spinner: {\n    margin: \"20px auto\",\n    display: \"block\"\n  }\n};\n\nconst columnHeaders = columnData.map(({ label }) => <TableCell key={label}>{label}</TableCell>);\nconst readQuery = `select  ?recordid ?adresse ?commune ?nbvelosdispo ?nbplacesdispo where { \n  ?k <http://www.schema.org#recordid> ?recordid .\n  ?k <http://www.schema.org#fields> ?l .\n  ?l <http://www.schema.org#adresse> ?adresse .\n  ?l <http://www.schema.org#commune> ?commune .\n  ?l <http://www.schema.org#nbvelosdispo> ?nbvelosdispo .\n  ?l <http://www.schema.org#nbplacesdispo> ?nbplacesdispo .                \n}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: []\n    };\n  }\n  componentDidMount() {\n    this.refreshData();\n  }\n  \n  refreshData() {\n    this.setState({\n      dataState: TableDataAvailabilityStatus.LOADING\n    });\n    query.execute(conn, dbName, readQuery).then(res => {\n      if (!res.ok) {\n        this.setState({\n          dataState: TableDataAvailabilityStatus.FAILED\n        });\n        return;\n      }\n  \n      const { bindings } = res.body.results;\n      \n    });\n  }\n  \n  // Our SPARQL query returns a new \"row\" (i.e., variable binding) for each\n  // character for each movie in which the character appears. We don't want to\n  // _display_ multiple rows for the same character, though. Instead, we want\n  // to show _one_ row for each character, and, if the character was in several\n  // movies, we want to show them as a group within that character's single row. This\n  // method goes through the bindings, groups them under each individual\n  // character's id, then merges them together, aggregating the movies as an\n  // array of strings. It also cleans up some of the data so that it's more\n  // readable in the UI.\n \n\n  render() {\n    const { dataState, data } = this.state;\n    const isLoading = dataState === TableDataAvailabilityStatus.LOADING;\n    return (\n      <div className=\"App\" style={styles.appInnerContainer}>\n        <CssBaseline />\n        <Paper style={styles.paper}>\n          <Toolbar>\n            <Typography variant=\"title\">\n              <i>Bike Stations</i> with Stardog\n            </Typography>\n          </Toolbar>\n          {isLoading ? <CircularProgress style={styles.spinner} /> : (\n            <Table>\n              <TableHead>\n                <TableRow>\n                  {columnHeaders}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data}\n              </TableBody>\n            </Table>\n          )}\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}