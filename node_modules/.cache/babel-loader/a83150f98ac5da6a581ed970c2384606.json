{"ast":null,"code":"var _jsxFileName = \"/Users/chloebalcer/bikeStation/frontend/src/components/bikes/searchBike.js\";\nimport React, { Component } from 'react';\nimport { query } from \"stardog\";\nimport { TableDataAvailabilityStatus, columnData, columnSelectors, conn, dbName } from \"../../helpers/constants\";\nconst readQuery = `select ?number ?address ?lat ?lng ?bikes ?stands ?commune\nwhere {\n    ?l <http://schema.org/number> ?number .\n    ?l <http://schema.org/address> ?address .\n    ?l <http://schema.org/available_bikes> ?bikes .\n    ?l <http://schema.org/available_bike_stands> ?stands .\n    ?l <http://schema.org/lat> ?lat .\n    ?l <http://schema.org/commune> {this.state.city} .\n    \n}\n`;\n\nclass SearchBike extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n      data: [],\n      city: ''\n    };\n    this.updateInput = this.updateInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  updateInput(event) {\n    this.setState({\n      city: event.target.value\n    });\n  }\n\n  handleSubmit() {\n    console.log('Your input value is: ' + this.state.city); //Send state to the server code\n  }\n\n  getBindingValueForSelector(selector, binding) {\n    const bindingValue = binding[selector === \"movie\" ? \"movies\" : selector]; // NOTE: In a production app, we would probably want to do this formatting elsewhere.\n\n    return Array.isArray(bindingValue) ? bindingValue.join(\", \") : bindingValue;\n  }\n\n  renderRowForBinding(binding, index) {\n    return (\n      /*#__PURE__*/\n      // Use every \"selector\" to extract table cell data from each binding.\n      React.createElement(TableRow, {\n        key: binding.number,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, columnSelectors.map(selector => /*#__PURE__*/React.createElement(TableCell, {\n        key: selector,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, this.getBindingValueForSelector(selector, binding))))\n    );\n  }\n\n  componentDidMount() {\n    this.refreshData();\n  }\n\n  refreshData() {\n    this.setState({\n      dataState: TableDataAvailabilityStatus.LOADING\n    });\n    query.execute(conn, dbName, readQuery).then(res => {\n      if (!res.ok) {\n        this.setState({\n          dataState: TableDataAvailabilityStatus.FAILED\n        });\n        return;\n      }\n\n      const {\n        bindings\n      } = res.body.results;\n      const bindingsForTable = this.getBindingsFormattedForTable(bindings);\n      this.setState({\n        dataState: TableDataAvailabilityStatus.LOADED,\n        data: bindingsForTable\n      });\n    });\n  } // Our SPARQL query returns a new \"row\" (i.e., variable binding) for each\n  // character for each movie in which the character appears. We don't want to\n  // _display_ multiple rows for the same character, though. Instead, we want\n  // to show _one_ row for each character, and, if the character was in several\n  // movies, we want to show them as a group within that character's single row. This\n  // method goes through the bindings, groups them under each individual\n  // character's id, then merges them together, aggregating the movies as an\n  // array of strings. It also cleans up some of the data so that it's more\n  // readable in the UI.\n\n\n  getBindingsFormattedForTable(bindings) {\n    // Group the bindings by each character id, in case multiple rows were\n    // returned for a single character.\n    const bindingsById = bindings.reduce((groupedBindings, binding) => {\n      const {\n        value: number\n      } = binding.number;\n      groupedBindings[number] = groupedBindings[number] ? groupedBindings[number].concat(binding) : [binding];\n      return groupedBindings;\n    }, {}); // Sort the bindings by id (ascending), then, if there are multiple\n    // bindings for a single id, merge them together, aggregating movies as an\n    // array.\n\n    return Object.keys(bindingsById).map(number => parseInt(number, 10)) // convert ids from strings to numbers for sorting\n    .sort() // we do this sorting client-side because `Object.keys` ordering is not guaranteed\n    .map(number => {\n      // For each `id`, merge the bindings together as described above.\n      return bindingsById[number].reduce((bindingForTable, binding) => {\n        // Quick cleanup to remove IRI data that we don't want to display:\n        const bindingValues = Object.keys(binding).reduce((valueBinding, key) => {\n          const {\n            type,\n            value\n          } = binding[key];\n          valueBinding[key] = type !== \"uri\" ? value : value.slice(value.lastIndexOf(\"/\") + 1); // data cleanup\n\n          return valueBinding;\n        }, {}); // Aggregate movies on the `movies` property, deleting `movie`:\n\n        const movies = bindingValues.movie ? bindingForTable.movies.concat(bindingValues.movie) : bindingForTable.movies;\n        delete bindingValues.movie;\n        return { ...bindingForTable,\n          ...bindingValues,\n          movies\n        };\n      }, {\n        movies: []\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.updateInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default SearchBike;","map":{"version":3,"sources":["/Users/chloebalcer/bikeStation/frontend/src/components/bikes/searchBike.js"],"names":["React","Component","query","TableDataAvailabilityStatus","columnData","columnSelectors","conn","dbName","readQuery","SearchBike","constructor","props","state","dataState","NOT_REQUESTED","data","city","updateInput","bind","handleSubmit","event","setState","target","value","console","log","getBindingValueForSelector","selector","binding","bindingValue","Array","isArray","join","renderRowForBinding","index","number","map","componentDidMount","refreshData","LOADING","execute","then","res","ok","FAILED","bindings","body","results","bindingsForTable","getBindingsFormattedForTable","LOADED","bindingsById","reduce","groupedBindings","concat","Object","keys","parseInt","sort","bindingForTable","bindingValues","valueBinding","key","type","slice","lastIndexOf","movies","movie","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { query } from \"stardog\";\nimport {\n  TableDataAvailabilityStatus,\n  columnData,\n  columnSelectors,\n  conn,\n  dbName,\n} from \"../../helpers/constants\";\n\nconst readQuery = `select ?number ?address ?lat ?lng ?bikes ?stands ?commune\nwhere {\n    ?l <http://schema.org/number> ?number .\n    ?l <http://schema.org/address> ?address .\n    ?l <http://schema.org/available_bikes> ?bikes .\n    ?l <http://schema.org/available_bike_stands> ?stands .\n    ?l <http://schema.org/lat> ?lat .\n    ?l <http://schema.org/commune> {this.state.city} .\n    \n}\n`;\n\nclass SearchBike extends Component {\n\nconstructor(props){\nsuper(props);\n\nthis.state = {\n    dataState: TableDataAvailabilityStatus.NOT_REQUESTED,\n    data: [],\n    city : ''\n}\n\nthis.updateInput = this.updateInput.bind(this);\nthis.handleSubmit = this.handleSubmit.bind(this);\n}\n\n\nupdateInput(event){\nthis.setState({city : event.target.value})\n}\n\n\nhandleSubmit(){\nconsole.log('Your input value is: ' + this.state.city)\n//Send state to the server code\n}\n\ngetBindingValueForSelector(selector, binding) {\n    const bindingValue = binding[selector === \"movie\" ? \"movies\" : selector];\n    // NOTE: In a production app, we would probably want to do this formatting elsewhere.\n    return Array.isArray(bindingValue) ? bindingValue.join(\", \") : bindingValue;\n  }\n\n  renderRowForBinding(binding, index) {\n    return (\n      // Use every \"selector\" to extract table cell data from each binding.\n      <TableRow key={binding.number}>\n        {columnSelectors.map(selector => (\n          <TableCell key={selector}>\n            {this.getBindingValueForSelector(selector, binding)}\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n  componentDidMount() {\n  this.refreshData();\n}\n\nrefreshData() {\n  this.setState({\n    dataState: TableDataAvailabilityStatus.LOADING\n  });\n  query.execute(conn, dbName, readQuery).then(res => {\n    if (!res.ok) {\n      this.setState({\n        dataState: TableDataAvailabilityStatus.FAILED\n      });\n      return;\n    }\n\n    const { bindings } = res.body.results;\n    const bindingsForTable = this.getBindingsFormattedForTable(bindings);\n\n    this.setState({\n      dataState: TableDataAvailabilityStatus.LOADED,\n      data: bindingsForTable\n    });\n  });\n}\n\n// Our SPARQL query returns a new \"row\" (i.e., variable binding) for each\n// character for each movie in which the character appears. We don't want to\n// _display_ multiple rows for the same character, though. Instead, we want\n// to show _one_ row for each character, and, if the character was in several\n// movies, we want to show them as a group within that character's single row. This\n// method goes through the bindings, groups them under each individual\n// character's id, then merges them together, aggregating the movies as an\n// array of strings. It also cleans up some of the data so that it's more\n// readable in the UI.\ngetBindingsFormattedForTable(bindings) {\n  // Group the bindings by each character id, in case multiple rows were\n  // returned for a single character.\n  const bindingsById = bindings.reduce((groupedBindings, binding) => {\n    const { value: number } = binding.number;\n    groupedBindings[number] = groupedBindings[number] ? groupedBindings[number].concat(binding) : [binding];\n    return groupedBindings;\n  }, {});\n\n  // Sort the bindings by id (ascending), then, if there are multiple\n  // bindings for a single id, merge them together, aggregating movies as an\n  // array.\n  return Object.keys(bindingsById)\n    .map(number => parseInt(number, 10)) // convert ids from strings to numbers for sorting\n    .sort() // we do this sorting client-side because `Object.keys` ordering is not guaranteed\n    .map(number => {\n      // For each `id`, merge the bindings together as described above.\n      return bindingsById[number].reduce(\n        (bindingForTable, binding) => {\n          // Quick cleanup to remove IRI data that we don't want to display:\n          const bindingValues = Object.keys(binding).reduce((valueBinding, key) => {\n            const { type, value } = binding[key];\n            valueBinding[key] = type !== \"uri\" ? value : value.slice(value.lastIndexOf(\"/\") + 1); // data cleanup\n            return valueBinding;\n          }, {});\n          // Aggregate movies on the `movies` property, deleting `movie`:\n          const movies = bindingValues.movie\n            ? bindingForTable.movies.concat(bindingValues.movie)\n            : bindingForTable.movies;\n          delete bindingValues.movie;\n          return {\n            ...bindingForTable,\n            ...bindingValues,\n            movies\n          };\n        },\n        { movies: [] }\n      );\n    });\n}\n\nrender(){\nreturn (\n    <div>\n    <input type=\"text\" onChange={this.updateInput}></input>\n    <input type=\"submit\" onClick={this.handleSubmit} ></input>\n    </div>\n  );\n}\n}\n\nexport default SearchBike;"]},"metadata":{},"sourceType":"module"}